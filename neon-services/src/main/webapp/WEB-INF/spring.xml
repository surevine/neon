<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd">
    
    <!-- APPLICATION AND SYSTEM BEANS -->
    <bean class="com.surevine.neon.util.SpringApplicationContext"/>
    
    <bean class="com.surevine.neon.Bootstrap" init-method="bootstrap">
        <property name="issuerOrganisationDAO" ref="issuerOrganisationDAO" />
        <property name="badgeClassDAO" ref="badgeClassDAO" />
        <property name="badgeAssertionDAO" ref="badgeAssertionDAO" />
        <property name="profileDAO" ref="profileDAO" />
        <property name="importerConfigurationDAO" ref="importerConfigurationDAO" />
    </bean>
    
    <bean name="systemHealthService" class="com.surevine.neon.service.impl.SystemHealthServiceImpl">
        <property name="inloadControlService" ref="inloadControlService" />
    </bean>
    
    <!-- PROFILE BEANS -->
    
    <!-- Profile registries -->
    <bean name="importRegistry" class="com.surevine.neon.inload.ImportRegistry" factory-method="getInstance">
        <property name="registry">
            <set>
                <ref bean="mockImporter" />
                <ref bean="findImporter" />
                <ref bean="mediaWikiImporter" />
                <ref bean="gitlabImporter" />
                <ref bean="jiveImporter" />
            </set>
        </property>
    </bean>

    <bean name="feedRegistry" class="com.surevine.neon.inload.FeedRegistry" factory-method="getInstance">
        <property name="registry">
            <set>
                <ref bean="doesNothingExampleFeed" />
            </set>
        </property>
    </bean>
    
    <!-- Profile DAO and data handlers -->
    <bean name="jedis" class="com.surevine.neon.redis.PooledJedisProxy" />
    
    <bean name="abstractPersistenceHandler" class="com.surevine.neon.dao.impl.AbstractNamespaceHandler" abstract="true">
        <property name="importerConfigurationDAO" ref="importerConfigurationDAO" />
        <property name="jedis" ref="jedis" />
    </bean>
    
    <bean name="profileDAO" class="com.surevine.neon.dao.impl.ProfileDAOImpl">
        <property name="jedis" ref="jedis" />
        <property name="handlers">
            <list>
                <bean class="com.surevine.neon.dao.impl.ActivityPersistenceHandler" parent="abstractPersistenceHandler" />
                <bean class="com.surevine.neon.dao.impl.AdditionalPropertiesPersistenceHandler" parent="abstractPersistenceHandler" />
                <bean class="com.surevine.neon.dao.impl.BasicDetailsPersistenceHandler" parent="abstractPersistenceHandler" />
                <bean class="com.surevine.neon.dao.impl.ConnectionsPersistenceHandler" parent="abstractPersistenceHandler" />
                <bean class="com.surevine.neon.dao.impl.ProjectPersistenceHandler" parent="abstractPersistenceHandler" />
                <bean class="com.surevine.neon.dao.impl.SkillsPersistenceHandler" parent="abstractPersistenceHandler" />
                <bean class="com.surevine.neon.dao.impl.StatusPersistenceHandler" parent="abstractPersistenceHandler" />
            </list>
        </property>
        <property name="listeners">
            <set>
                <ref bean="badgeCriteriaProfileListener" />
            </set>
        </property>
    </bean>
    
    <bean name="searchDAO" class="com.surevine.neon.dao.impl.SimpleIteratingSearchDAOIml">
    	<property name="profileDAO" ref="profileDAO"/>
    </bean>

    <bean name="importerConfigurationDAO" class="com.surevine.neon.dao.impl.ImporterConfigurationDAOImpl">
        <property name="jedis" ref="jedis" />
    </bean>

    <bean name="feedConfigurationDAO" class="com.surevine.neon.dao.impl.FeedConfigurationDAOImpl">
        <property name="jedis" ref="jedis" />
    </bean>
    
    <!-- Profile service definitions -->
    <bean name="profileService" class="com.surevine.neon.service.impl.ProfileServiceImpl">
        <property name="dao" ref="profileDAO" />
        <property name="importRegistry" ref="importRegistry" />
    </bean>
    
    <bean name="skillService" class="com.surevine.neon.service.impl.SkillServiceImpl">
        <property name="searchDAO" ref="searchDAO" />
        <property name="profileDAO" ref="profileDAO" />
    </bean>

    <bean name="inloadControlService" class="com.surevine.neon.service.impl.InloadControlServiceImpl">
        <property name="registry" ref="importRegistry" />
        <property name="importerConfigurationDAO" ref="importerConfigurationDAO"/>
    </bean>
    
    <!-- Profile data importers - add to importRegistry above -->
    <bean name="baseImporter" class="com.surevine.neon.inload.importers.AbstractDataImporter" abstract="true">
        <!-- 
             If clearConfig is set to true (globally here or in a specific concrete importer below) then ALL old config
             for an importer will be deleted the first time any configuration updates or additions are made to an 
             importer (this will usually be an initialisation when the properties are set from this spring.xml file).
             
             If false then old configuration is left in the database and only overwrites will affect any old config options.
        -->
        <property name="clearConfig" value="false"/>
        <property name="configurationDAO" ref="importerConfigurationDAO"/>
        <property name="profileDAO" ref="profileDAO"/>
    </bean>
    
    <!-- this is here to provide mock importer metadata to use with mocked profiles - do not remove -->
    <bean name="mockImporter" class="com.surevine.neon.inload.importers.MockImporter" parent="baseImporter">
        <property name="enabled" value="false" />
        <property name="sourcePriority" value="1" />
    </bean>

    <bean name="findImporter" class="com.surevine.neon.inload.importers.find.FindImporter" parent="baseImporter">
        <property name="enabled" value="${import.find.enabled}" />
        <property name="cacheTimeout" value="${import.find.cacheTimeout}" />
        <property name="sourcePriority" value="${import.find.sourcePriority}" />
        <property name="additionalConfiguration">
            <map>
                <entry key="urlBase" value="${import.find.host}:8080/neon-services/example_fsrf.json?user={username}" />
                <entry key="dateFormat" value="YYYY-MM-dd" />
            </map>
        </property>
    </bean>

    <bean name="mediaWikiImporter" class="com.surevine.neon.inload.importers.mediawiki.WikiProfileImporter" parent="baseImporter">
        <property name="enabled" value="${import.wiki.enabled}" />
        <property name="cacheTimeout" value="${import.wiki.cacheTimeout}" />
        <property name="sourcePriority" value="${import.wiki.sourcePriority}" />
        <property name="additionalConfiguration">
            <map>
                <entry key="mediaWikiProfilePage" value="${import.wiki.host}/index.php/User:{username}@client?action=raw" />
                <entry key="wikiImageURLBase" value="${import.wiki.host}/index.php/File:{fileName}" />
                <entry key="wikiImageRawURLBase" value="${import.wiki.host}/images/{rawFile}" />
            </map>
        </property>
    </bean>

    <bean name="gitlabImporter" class="com.surevine.neon.inload.importers.gitlab.GitlabProfileImporter" parent="baseImporter">
        <property name="enabled" value="${import.gitlab.enabled}" />
        <property name="cacheTimeout" value="${import.gitlab.cacheTimeout}" />
        <property name="sourcePriority" value="${import.gitlab.sourcePriority}" />
        <property name="additionalConfiguration">
            <map>
                <entry key="authenticationToken" value="${import.gitlab.authenticationToken}" />
                <entry key="urlBase" value="${import.gitlab.host}/" />
                <entry key="dateFormat" value="YYYY-MM-dd'T'HH:mm:ss'Z'" />
                <entry key="commitDateFormat" value="yyyy-MM-dd'T'HH:mm:ssXXX" />
                <entry key="profileBaseURL" value="api/v3/users?private_token={auth_token}&amp;per_page=100&amp;page={page_id}" />
                <entry key="projectBaseURL" value="api/v3/projects?private_token={auth_token}&amp;per_page=100&amp;page={page_id}" />
                <entry key="commitsBaseURL" value="api/v3/projects/{projectId}/repository/commits?private_token={auth_token}&amp;per_page=100&amp;page={page_id}" />
                <entry key="projectMembershipURLBase" value="api/v3/projects/{projectId}/members?private_token={auth_token}&amp;query={username}&amp;per_page=100" />
                <entry key="listProjectMembersURLBase" value="api/v3/projects/{projectId}/members?private_token={auth_token}&amp;per_page=100&amp;page={page_id}" />
                <entry key="commitWebURLBase" value="{project_name}/commit/{commit_id}" />
                <entry key="issueURLBase" value="api/v3/issues?private_token={auth_token}&amp;per_page=100&amp;page={page_id}" />
                <entry key="issueWebURLBase" value="{project_name}/issues/{issue_id}" />
            </map>
        </property>
    </bean>

    <bean name="jiveImporter" class="com.surevine.neon.inload.importers.jive.JiveImporter" parent="baseImporter">
        <property name="enabled" value="${import.jive.enabled}" />
        <property name="cacheTimeout" value="${import.jive.cacheTimeout}" />
        <property name="sourcePriority" value="${import.jive.sourcePriority}" />
        <property name="username" value="${import.jive.username}" />
        <property name="password" value="${import.jive.password}" />
        <property name="additionalConfiguration">
            <map>
                <entry key="hostname" value="${import.jive.host}" />
                <entry key="jiveUrlBase" value="http://{hostname}/api/core/v3/" />
                <entry key="peopleService" value="people/username/{username}" />
                <entry key="followersService" value="people/{username}/@followers" />
                <entry key="followingService" value="people/{username}/@following" />
            </map>
        </property>
    </bean>
    
    <!-- Profile data feeds - add to feedRegistry above -->
    <bean name="baseFeed" class="com.surevine.neon.inload.feeds.AbstractDataFeed" abstract="true">
        <property name="configurationDAO" ref="feedConfigurationDAO"/>
    </bean>
    
    <bean name="doesNothingExampleFeed" class="com.surevine.neon.inload.feeds.DoesNothingExampleFeed" parent="baseFeed">
        <property name="enabled" value="true" />
        <property name="sourcePriority" value="1" />
    </bean>
    
    <!-- BADGE SERVICE BEANS -->
    
    <!-- Badge DAOs -->
    <bean name="abstractBadgeDAO" class="com.surevine.neon.badges.dao.impl.AbstractRedisJSONDAO" abstract="true">
        <property name="jedis" ref="jedis" />
    </bean>
    
    <bean name="badgeAssertionDAO" class="com.surevine.neon.badges.dao.impl.RedisJSONBadgeAssertionDAOImpl" parent="abstractBadgeDAO" />

    <bean name="badgeClassDAO" class="com.surevine.neon.badges.dao.impl.RedisJSONBadgeClassDAOImpl" parent="abstractBadgeDAO" />

    <bean name="issuerOrganisationDAO" class="com.surevine.neon.badges.dao.impl.RedisJSONIssuerOrganisationDAOImpl" parent="abstractBadgeDAO" />

    <bean name="revocationListDAO" class="com.surevine.neon.badges.dao.impl.RedisJSONRevocationListDAOImpl" parent="abstractBadgeDAO" />
    
    <!-- Badge service definitions -->
    <bean name="badgeAssertionService" class="com.surevine.neon.badges.service.impl.BadgeAssertionServiceImpl">
        <property name="dao" ref="badgeAssertionDAO" />
    </bean>

    <bean name="badgeBakeryService" class="com.surevine.neon.badges.service.impl.BadgeBakeryServiceImpl">
        <property name="dao" ref="badgeAssertionDAO" />
    </bean>

    <bean name="badgeClassService" class="com.surevine.neon.badges.service.impl.BadgeClassServiceImpl">
        <property name="dao" ref="badgeClassDAO" />
    </bean>

    <bean name="badgeValidationService" class="com.surevine.neon.badges.service.impl.BadgeValidationServiceImpl" />

    <bean name="issuerOrganisationService" class="com.surevine.neon.badges.service.impl.IssuerOrganisationServiceImpl">
        <property name="dao" ref="issuerOrganisationDAO" />
    </bean>

    <bean name="revocationListService" class="com.surevine.neon.badges.service.impl.RevocationListServiceImpl">
        <property name="dao" ref="revocationListDAO" />
    </bean>
    
    <!-- Badge criteria checking -->
    <bean name="abstractBadgeCriteriaChecker" class="com.surevine.neon.badges.criteria.BadgeCriteriaChecker" abstract="true">
        <property name="badgeAssertionDAO" ref="badgeAssertionDAO" />
        <property name="badgeClassDAO" ref="badgeClassDAO" />
    </bean>
    
    <bean name="badgeCriteriaProfileListener" class="com.surevine.neon.badges.criteria.BadgeCriteriaProfileListener">
        <property name="criteriaCheckers">
            <set>
                <bean class="com.surevine.neon.badges.criteria.BigCheeseCriteriaChecker" parent="abstractBadgeCriteriaChecker" />
                <bean class="com.surevine.neon.badges.criteria.BugHunterCriteriaChecker" parent="abstractBadgeCriteriaChecker" />
                <bean class="com.surevine.neon.badges.criteria.FullyCommittedCriteriaChecker" parent="abstractBadgeCriteriaChecker" />
                <bean class="com.surevine.neon.badges.criteria.MergeMasterCriteriaChecker" parent="abstractBadgeCriteriaChecker" />
                <bean class="com.surevine.neon.badges.criteria.PestControlCriteriaChecker" parent="abstractBadgeCriteriaChecker" />
                <bean class="com.surevine.neon.badges.criteria.PushyCriteriaChecker" parent="abstractBadgeCriteriaChecker" />
                <bean class="com.surevine.neon.badges.criteria.SocialButterflyCriteriaChecker" parent="abstractBadgeCriteriaChecker" />
                <bean class="com.surevine.neon.badges.criteria.SplitPersonalityCriteriaChecker" parent="abstractBadgeCriteriaChecker" />
                <bean class="com.surevine.neon.badges.criteria.TeamPlayerCriteriaChecker" parent="abstractBadgeCriteriaChecker" />
            </set>
        </property>
        <property name="badgeAssertionDAO" ref="badgeAssertionDAO" />
    </bean>
</beans>